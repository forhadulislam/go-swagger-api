// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetV1UsersUserIDHandlerFunc turns a function with the right signature into a get v1 users user ID handler
type GetV1UsersUserIDHandlerFunc func(GetV1UsersUserIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetV1UsersUserIDHandlerFunc) Handle(params GetV1UsersUserIDParams) middleware.Responder {
	return fn(params)
}

// GetV1UsersUserIDHandler interface for that can handle valid get v1 users user ID params
type GetV1UsersUserIDHandler interface {
	Handle(GetV1UsersUserIDParams) middleware.Responder
}

// NewGetV1UsersUserID creates a new http.Handler for the get v1 users user ID operation
func NewGetV1UsersUserID(ctx *middleware.Context, handler GetV1UsersUserIDHandler) *GetV1UsersUserID {
	return &GetV1UsersUserID{Context: ctx, Handler: handler}
}

/*GetV1UsersUserID swagger:route GET /v1/users/{userId} getV1UsersUserId

Returns the user information of the given user id

Get user of given user id
```
GET /api/v1/users/{userId}
```


*/
type GetV1UsersUserID struct {
	Context *middleware.Context
	Handler GetV1UsersUserIDHandler
}

func (o *GetV1UsersUserID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetV1UsersUserIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
