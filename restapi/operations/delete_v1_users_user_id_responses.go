// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/forhadulislam/go-swagger-api/models"
)

// DeleteV1UsersUserIDOKCode is the HTTP code returned for type DeleteV1UsersUserIDOK
const DeleteV1UsersUserIDOKCode int = 200

/*DeleteV1UsersUserIDOK User was removed successfully

swagger:response deleteV1UsersUserIdOK
*/
type DeleteV1UsersUserIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.Status `json:"body,omitempty"`
}

// NewDeleteV1UsersUserIDOK creates DeleteV1UsersUserIDOK with default headers values
func NewDeleteV1UsersUserIDOK() *DeleteV1UsersUserIDOK {

	return &DeleteV1UsersUserIDOK{}
}

// WithPayload adds the payload to the delete v1 users user Id o k response
func (o *DeleteV1UsersUserIDOK) WithPayload(payload *models.Status) *DeleteV1UsersUserIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete v1 users user Id o k response
func (o *DeleteV1UsersUserIDOK) SetPayload(payload *models.Status) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteV1UsersUserIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteV1UsersUserIDNotFoundCode is the HTTP code returned for type DeleteV1UsersUserIDNotFound
const DeleteV1UsersUserIDNotFoundCode int = 404

/*DeleteV1UsersUserIDNotFound User of the given user id was not found

swagger:response deleteV1UsersUserIdNotFound
*/
type DeleteV1UsersUserIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Status `json:"body,omitempty"`
}

// NewDeleteV1UsersUserIDNotFound creates DeleteV1UsersUserIDNotFound with default headers values
func NewDeleteV1UsersUserIDNotFound() *DeleteV1UsersUserIDNotFound {

	return &DeleteV1UsersUserIDNotFound{}
}

// WithPayload adds the payload to the delete v1 users user Id not found response
func (o *DeleteV1UsersUserIDNotFound) WithPayload(payload *models.Status) *DeleteV1UsersUserIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete v1 users user Id not found response
func (o *DeleteV1UsersUserIDNotFound) SetPayload(payload *models.Status) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteV1UsersUserIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteV1UsersUserIDInternalServerErrorCode is the HTTP code returned for type DeleteV1UsersUserIDInternalServerError
const DeleteV1UsersUserIDInternalServerErrorCode int = 500

/*DeleteV1UsersUserIDInternalServerError Error while deleting the user

swagger:response deleteV1UsersUserIdInternalServerError
*/
type DeleteV1UsersUserIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Status `json:"body,omitempty"`
}

// NewDeleteV1UsersUserIDInternalServerError creates DeleteV1UsersUserIDInternalServerError with default headers values
func NewDeleteV1UsersUserIDInternalServerError() *DeleteV1UsersUserIDInternalServerError {

	return &DeleteV1UsersUserIDInternalServerError{}
}

// WithPayload adds the payload to the delete v1 users user Id internal server error response
func (o *DeleteV1UsersUserIDInternalServerError) WithPayload(payload *models.Status) *DeleteV1UsersUserIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete v1 users user Id internal server error response
func (o *DeleteV1UsersUserIDInternalServerError) SetPayload(payload *models.Status) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteV1UsersUserIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
