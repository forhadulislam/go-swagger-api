// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/forhadulislam/go-swagger-api/models"
)

// GetV1UsersUserIDOKCode is the HTTP code returned for type GetV1UsersUserIDOK
const GetV1UsersUserIDOKCode int = 200

/*GetV1UsersUserIDOK User data was fetched successfully

swagger:response getV1UsersUserIdOK
*/
type GetV1UsersUserIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.UserResponse `json:"body,omitempty"`
}

// NewGetV1UsersUserIDOK creates GetV1UsersUserIDOK with default headers values
func NewGetV1UsersUserIDOK() *GetV1UsersUserIDOK {

	return &GetV1UsersUserIDOK{}
}

// WithPayload adds the payload to the get v1 users user Id o k response
func (o *GetV1UsersUserIDOK) WithPayload(payload *models.UserResponse) *GetV1UsersUserIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 users user Id o k response
func (o *GetV1UsersUserIDOK) SetPayload(payload *models.UserResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1UsersUserIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetV1UsersUserIDNotFoundCode is the HTTP code returned for type GetV1UsersUserIDNotFound
const GetV1UsersUserIDNotFoundCode int = 404

/*GetV1UsersUserIDNotFound User data for given user id was not found

swagger:response getV1UsersUserIdNotFound
*/
type GetV1UsersUserIDNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Status `json:"body,omitempty"`
}

// NewGetV1UsersUserIDNotFound creates GetV1UsersUserIDNotFound with default headers values
func NewGetV1UsersUserIDNotFound() *GetV1UsersUserIDNotFound {

	return &GetV1UsersUserIDNotFound{}
}

// WithPayload adds the payload to the get v1 users user Id not found response
func (o *GetV1UsersUserIDNotFound) WithPayload(payload *models.Status) *GetV1UsersUserIDNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 users user Id not found response
func (o *GetV1UsersUserIDNotFound) SetPayload(payload *models.Status) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1UsersUserIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetV1UsersUserIDInternalServerErrorCode is the HTTP code returned for type GetV1UsersUserIDInternalServerError
const GetV1UsersUserIDInternalServerErrorCode int = 500

/*GetV1UsersUserIDInternalServerError Error while fetching User data

swagger:response getV1UsersUserIdInternalServerError
*/
type GetV1UsersUserIDInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Status `json:"body,omitempty"`
}

// NewGetV1UsersUserIDInternalServerError creates GetV1UsersUserIDInternalServerError with default headers values
func NewGetV1UsersUserIDInternalServerError() *GetV1UsersUserIDInternalServerError {

	return &GetV1UsersUserIDInternalServerError{}
}

// WithPayload adds the payload to the get v1 users user Id internal server error response
func (o *GetV1UsersUserIDInternalServerError) WithPayload(payload *models.Status) *GetV1UsersUserIDInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get v1 users user Id internal server error response
func (o *GetV1UsersUserIDInternalServerError) SetPayload(payload *models.Status) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetV1UsersUserIDInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
