// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// PostV1UsersHandlerFunc turns a function with the right signature into a post v1 users handler
type PostV1UsersHandlerFunc func(PostV1UsersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostV1UsersHandlerFunc) Handle(params PostV1UsersParams) middleware.Responder {
	return fn(params)
}

// PostV1UsersHandler interface for that can handle valid post v1 users params
type PostV1UsersHandler interface {
	Handle(PostV1UsersParams) middleware.Responder
}

// NewPostV1Users creates a new http.Handler for the post v1 users operation
func NewPostV1Users(ctx *middleware.Context, handler PostV1UsersHandler) *PostV1Users {
	return &PostV1Users{Context: ctx, Handler: handler}
}

/*PostV1Users swagger:route POST /v1/users postV1Users

Create new user

Create a new user
```
POST /api/v1/users
```


*/
type PostV1Users struct {
	Context *middleware.Context
	Handler PostV1UsersHandler
}

func (o *PostV1Users) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPostV1UsersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
