// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A simple API built with Swagger for demonstration",
    "title": "GO Swagger API",
    "version": "0.0.1"
  },
  "basePath": "/api",
  "paths": {
    "/v1/users": {
      "get": {
        "description": "Get list of all users\n` + "`" + `` + "`" + `` + "`" + `\nGET /api/v1/users\n",
        "summary": "Returns list of all users",
        "responses": {
          "200": {
            "description": "Users fetched successfully",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "500": {
            "description": "Error while fetching all user ids",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      },
      "post": {
        "description": "Create a new user\n` + "`" + `` + "`" + `` + "`" + `\nPOST /api/v1/users\n` + "`" + `` + "`" + `` + "`" + `\n",
        "summary": "Create new user",
        "parameters": [
          {
            "description": "Parameters of users information",
            "name": "userRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New user created successfully",
            "schema": {
              "$ref": "#/definitions/userId"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Error while creating new user",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "description": "Get user of given user id\n` + "`" + `` + "`" + `` + "`" + `\nGET /api/v1/users/{userId}\n` + "`" + `` + "`" + `` + "`" + `\n",
        "summary": "Returns the user information of the given user id",
        "parameters": [
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User data was fetched successfully",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "404": {
            "description": "User data for given user id was not found",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Error while fetching User data",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user data of given user id\n` + "`" + `` + "`" + `` + "`" + `\nDELETE /api/v1/users/{userId}\n` + "`" + `` + "`" + `` + "`" + `\n",
        "summary": "Removes the User data of given user id",
        "parameters": [
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User was removed successfully",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "User of the given user id was not found",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Error while deleting the user",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Status": {
      "description": "The user success status",
      "type": "object",
      "properties": {
        "code": {
          "description": "status code",
          "type": "integer"
        },
        "message": {
          "description": "status message",
          "type": "string"
        }
      }
    },
    "UserRequest": {
      "type": "object",
      "required": [
        "userId",
        "userName"
      ],
      "properties": {
        "registeredAt": {
          "type": "string"
        },
        "userAddress": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "userFullName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "required": [
        "userId",
        "userName",
        "userFullName",
        "registeredAt"
      ],
      "properties": {
        "registeredAt": {
          "type": "string"
        },
        "userAddress": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "userFullName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "userId": {
      "description": "User ID of the created user",
      "type": "string"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A simple API built with Swagger for demonstration",
    "title": "GO Swagger API",
    "version": "0.0.1"
  },
  "basePath": "/api",
  "paths": {
    "/v1/users": {
      "get": {
        "description": "Get list of all users\n` + "`" + `` + "`" + `` + "`" + `\nGET /api/v1/users\n",
        "summary": "Returns list of all users",
        "responses": {
          "200": {
            "description": "Users fetched successfully",
            "schema": {
              "$ref": "#/definitions/Users"
            }
          },
          "500": {
            "description": "Error while fetching all user ids",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      },
      "post": {
        "description": "Create a new user\n` + "`" + `` + "`" + `` + "`" + `\nPOST /api/v1/users\n` + "`" + `` + "`" + `` + "`" + `\n",
        "summary": "Create new user",
        "parameters": [
          {
            "description": "Parameters of users information",
            "name": "userRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New user created successfully",
            "schema": {
              "$ref": "#/definitions/userId"
            }
          },
          "400": {
            "description": "Invalid request",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Error while creating new user",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/v1/users/{userId}": {
      "get": {
        "description": "Get user of given user id\n` + "`" + `` + "`" + `` + "`" + `\nGET /api/v1/users/{userId}\n` + "`" + `` + "`" + `` + "`" + `\n",
        "summary": "Returns the user information of the given user id",
        "parameters": [
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User data was fetched successfully",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "404": {
            "description": "User data for given user id was not found",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Error while fetching User data",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      },
      "delete": {
        "description": "Delete user data of given user id\n` + "`" + `` + "`" + `` + "`" + `\nDELETE /api/v1/users/{userId}\n` + "`" + `` + "`" + `` + "`" + `\n",
        "summary": "Removes the User data of given user id",
        "parameters": [
          {
            "type": "string",
            "description": "User id",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User was removed successfully",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "User of the given user id was not found",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "500": {
            "description": "Error while deleting the user",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Status": {
      "description": "The user success status",
      "type": "object",
      "properties": {
        "code": {
          "description": "status code",
          "type": "integer"
        },
        "message": {
          "description": "status message",
          "type": "string"
        }
      }
    },
    "UserRequest": {
      "type": "object",
      "required": [
        "userId",
        "userName"
      ],
      "properties": {
        "registeredAt": {
          "type": "string"
        },
        "userAddress": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "userFullName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "UserResponse": {
      "type": "object",
      "required": [
        "userId",
        "userName",
        "userFullName",
        "registeredAt"
      ],
      "properties": {
        "registeredAt": {
          "type": "string"
        },
        "userAddress": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "userFullName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "Users": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "userId": {
      "description": "User ID of the created user",
      "type": "string"
    }
  }
}`))
}
