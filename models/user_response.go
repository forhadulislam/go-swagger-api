// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserResponse user response
// swagger:model UserResponse
type UserResponse struct {

	// registered at
	// Required: true
	RegisteredAt *string `json:"registeredAt"`

	// user address
	UserAddress string `json:"userAddress,omitempty"`

	// user email
	UserEmail string `json:"userEmail,omitempty"`

	// user full name
	// Required: true
	UserFullName *string `json:"userFullName"`

	// user Id
	// Required: true
	UserID *string `json:"userId"`

	// user name
	// Required: true
	UserName *string `json:"userName"`
}

// Validate validates this user response
func (m *UserResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegisteredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserFullName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserResponse) validateRegisteredAt(formats strfmt.Registry) error {

	if err := validate.Required("registeredAt", "body", m.RegisteredAt); err != nil {
		return err
	}

	return nil
}

func (m *UserResponse) validateUserFullName(formats strfmt.Registry) error {

	if err := validate.Required("userFullName", "body", m.UserFullName); err != nil {
		return err
	}

	return nil
}

func (m *UserResponse) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

func (m *UserResponse) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserResponse) UnmarshalBinary(b []byte) error {
	var res UserResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
